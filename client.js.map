{"version":3,"file":"client.js","sourceRoot":"","sources":["client.ts"],"names":[],"mappings":"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","sourcesContent":["import Node from './node';\nimport Utils from './utils';\n\n\n\nexport class Client {\n\n    private protocol:string;\n    private host:string;\n    private port:string;\n    private path:string;\n    private headers:any;\n    private streamed:boolean;\n    private service:any;\n\n    constructor(url,headers?){\n        if(url){\n            this.configure(url,headers)\n        }\n    }\n    configure(url,headers){\n        if(typeof url == 'string'){\n            url = Node.Url.parse(url,true);\n        }\n        this.protocol   = url.protocol;\n        this.host       = url.hostname;\n        this.port       = url.port;\n        this.path       = url.pathname;\n        this.headers    = headers||{};\n        this.streamed   = false;\n        switch(url.protocol){\n            case 'http:' : this.service = Node.Http;  break;\n            case 'https:': this.service = Node.Https; break;\n            default      : throw new Error('invalid http protocol '+url.protocol)\n        }\n    }\n    initRequest(req){\n        var url = Node.Url.parse(req.url||req.path);\n        return (Utils.cleanup({\n            method   : req.method   || 'GET',\n            hostname : url.hostname || req.host     || this.host,\n            port     : url.port     || req.port     || this.port || undefined,\n            headers  : Utils.merge(this.headers,req.headers),\n            path     : Node.Path.resolve(this.path,url.path||'') + ((url.query||req.query)?'?'+Node.Qs.stringify(url.query||req.query):''),\n            content  : req.content\n        }));\n    }\n    initResponse(req, res){\n        res.streamed = req.streamed || this.streamed;\n        var contentType     = res.headers['content-type'];\n        var contentEncoding = res.headers['content-encoding'];\n        if ((\n            contentType && contentType.indexOf('application/x-gzip') >= 0) ||\n            contentEncoding && contentEncoding.indexOf('gzip') >= 0\n        ){\n            return res.pipe(Node.Zlib.createGunzip());\n        } else {\n            return res;\n        }\n    }\n\n    encode(req){\n        return req.content;\n    }\n    decode(res){\n        return res;\n    }\n\n    onRequest(req){}\n    onSuccess(req,res){}\n    onFailure(req,err){}\n\n    request(req){\n        return new Promise((resolve,reject)=> {\n            req = this.initRequest(req);\n            this.onRequest(req);\n            var request = this.service.request(req);\n            request.on('error', err=> {\n                err.request   = req;\n                this.onFailure(req,err);\n                reject(err);\n            });\n            request.on('response', res=> {\n                var response = {\n                    status  : res.statusCode,\n                    message : res.statusMessage,\n                    headers : res.headers,\n                    content : null\n                };\n                res  = this.initResponse(req,res);\n                if (request.streamed) {\n                    resolve({\n                        stream  : req,\n                        status  : res.statusCode,\n                        headers : res.headers\n                    })\n                } else {\n\n                    var content = new Buffer(0);\n                    res.on('data', chunk=>content=Buffer.concat([content, chunk], content.length + chunk.length));\n                    res.on('end', ()=>{\n                        try{\n                            response.content = content;\n                            response = this.decode(response);\n                            this.onSuccess(req,response);\n                            resolve(response);\n                        }catch(error){\n                            this.onFailure(req,error);\n                            reject(error);\n                        }\n                    });\n                    res.on('error',error=>{\n                        this.onFailure(req,error);\n                        reject(error);\n                    });\n                }\n            });\n            req.content = this.encode(req) || req.content;\n            if (req.content) {\n                request.end(req.content);\n            } else {\n                request.end();\n            }\n        });\n    }\n}"]}