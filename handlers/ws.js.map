{"version":3,"file":"ws.js","sourceRoot":"","sources":["ws.ts"],"names":[],"mappings":"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","sourcesContent":["import Node from '../node';\nimport {Server} from \"../server\";\nimport {Handler} from \"./handler\";\nimport {Socket} from \"../ws/socket\";\nimport {Class} from \"runtime/reflect/class\";\nimport {RestRoute} from \"./rest\";\nimport {Method} from \"runtime/reflect/method\";\n\n@Server.handler('ws')\nexport class WebSocketHandler extends Handler {\n    static get routes():{[k:string]:RestRoute}{\n        return Object.defineProperty(this,'routes',{\n            enumerable:true,\n            value:Object.create(null)\n        }).routes;\n    }\n    static register(path,resource:Class){\n        let method = resource.getConstructor();\n        let route = new RestRoute(path,method);\n        let routeId = route.toString();\n        if(!this.routes[routeId]){\n            this.routes[routeId] = route;\n        }else{\n            route = this.routes[routeId];\n            throw new Error(`Cant route '${method.toString()}' to '${path}' it's already bounded to ${route.method.toString()}`);\n        }\n    }\n    constructor(){\n        super();\n        WebSocketHandler.server.on('upgrade',(request, socket, body)=>{\n            if (Socket.isWebSocket(request)){\n                this.getRoute(request, socket, body);\n            }\n        })\n    }\n    getRoute(request,socket, body){\n        let url = Node.Url.parse(request.url,true);\n        let method = request.method.toUpperCase();\n        let headers = request.headers;\n        let query = url.query;\n        let route,matched,path = method+' '+url.pathname;\n        for(let r in WebSocketHandler.routes){\n            route = WebSocketHandler.routes[r];\n            if(matched = route.match(path)){\n                matched.shift();\n                let options = route.toJSON();\n                options.params = {};\n                options.query = query;\n                options.headers = headers;\n                options.matched = matched;\n                route.params.forEach((p,i)=>{\n                    options.params[p] = matched[i];\n                });\n                return route.execute(options,request,socket,body,route.method.owner.metadata.ws);\n            }\n        }\n        return null;\n    }\n}"]}