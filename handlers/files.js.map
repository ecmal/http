{"version":3,"file":"files.js","sourceRoot":"","sources":["files.ts"],"names":[],"mappings":";;IAMA;QAUY,yBAAK,GAAb,UAAc,GAAG;YACb,EAAE,CAAA,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA,CAAC;gBACxB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAC;QACL,CAAC;QACO,4BAAQ,GAAhB;YACI,MAAM,CAAC,WAAS,IAAI,CAAC,OAAO,YAAO,IAAI,CAAC,QAAQ,MAAG,CAAA;QACvD,CAAC;QACL,gBAAC;QAfG,mBAAY,QAAQ;YAChB,EAAE,CAAA,CAAC,OAAO,QAAQ,IAAE,QAAQ,CAAC,CAAA,CAAC;gBAC1B,QAAQ,GAAG,CAAC,WAAW,EAAC,CAAG,QAAQ,SAAK,CAAC,CAAC;YAC9C,CAAC;YACD,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QACrC,CAAC;IASL,CAAC,AAlBD,IAkBC;;IAlBD,qCAkBC,CAAA;IAGD;QAcY,8BAAQ,GAAhB,UAAiB,IAAI;YACjB,IAAI,CAAC;gBACD,IAAI,IAAI,GAAG,cAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;gBAChE,CAAC;gBAAC,IAAI,CACN,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;oBAChB,MAAM,CAAC,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC;gBAClC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC;gBACnC,CAAC;YACL,CAAC;YAAA,KAAK,CAAA,CAAC,CAAC,CAAC,CAAA,CAAC;gBACN,MAAM,CAAC,EAAC,KAAK,EAAC,KAAK,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC;YACnC,CAAC;QACL,CAAC;QACO,4BAAM,GAAd,UAAe,GAAG,EAAC,GAAG;QAEtB,CAAC;QACO,4BAAM,GAAd,UAAe,GAAG,EAAC,GAAG;YAClB,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,GAAG,CAAA,CAAC,IAAI,IAAI,EAAC,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAC,CAAC,EAAE,EAAC,CAAC;gBACvC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAClC,EAAE,CAAA,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA,CAAC;oBAC3C,KAAK,CAAC;gBACV,CAAC;YACL,CAAC;YACD,EAAE,CAAA,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;gBACnB,IAAI,MAAM,GAAG,GAAG,CAAC;gBACjB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;gBAE9B,IAAI,OAAO,GAAG;oBACV,cAAc,EAAI,WAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;iBAC5C,CAAC;gBACF,EAAE,CAAA,CAAC,KAAK,CAAC,CAAA,CAAC;oBACN,OAAO,CAAC,eAAe,CAAC,GAAM,uBAAuB,CAAC;oBACtD,OAAO,CAAC,SAAS,CAAC,GAAY,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;gBACxF,CAAC;gBAAA,IAAI,CAAC,CAAC;oBACH,OAAO,CAAC,eAAe,CAAC,GAAM,UAAU,CAAC;gBAC7C,CAAC;gBAED,GAAG,CAAC,MAAM,GAAG,cAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;gBACxC,EAAE,CAAA,CAAC,EAAE,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,IAAE,CAAC,CAAC,CAAA,CAAC;oBAC5B,OAAO,CAAC,kBAAkB,CAAC,GAAC,MAAM,CAAC;oBACnC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;gBACzD,CAAC;gBACD,GAAG,CAAC,SAAS,CAAC,MAAM,EAAC,OAAO,CAAC,CAAC;YAElC,CAAC;YAAA,IAAI,CAAA,CAAC;gBACF,GAAG,CAAC,SAAS,CAAC,GAAG,EAAC;oBACd,cAAc,EAAG,WAAI,CAAC,OAAO,CAAC,IAAI,GAAC,IAAI,CAAC,IAAI,GAAC,GAAG,CAAC,GAAG,CAAC;iBACxD,CAAC,CAAC;gBACH,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;;;;;;;;;;;;;;;;;;;4DArEL;gBAAA,CAAC,eAAM,CAAC,OAAO,CAAC,OAAO,CAAC;YAAA;gBACS,iBAAO;;;QAqExC,kBAAC;QAlEG;YAHJ,iBAqEC;YAjEO,kBAAO,CAAC;YACR,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;YACjC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,EAAE,CAAA,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,IAAE,QAAQ,CAAC,CAAA,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,CAAC;gBACtB,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;QACP,CAAC;IAwDL,CAAC,AArED,IAqEC;;IArED,yCAqEC,CAAA;;;;;;;;;;;;;;;;YA1FD,wBAAA,SAkBC;YAGD,0BAAA,YAAiC,iBAqEhC","sourcesContent":["import Node from '../node';\n\nimport {Server} from '../server';\nimport {Mime} from '../mime';\nimport {Handler} from './handler';\n\nexport class FileRoute {\n    private pattern:any;\n    private location:any;\n    constructor(settings){\n        if(typeof settings=='string'){\n            settings = [/^\\/(.*)$/i,`${settings}/$1`];\n        }\n        this.pattern = settings.shift();\n        this.location = settings.shift();\n    }\n    private match(url){\n        if(url.match(this.pattern)){\n            return url.replace(this.pattern,this.location);\n        }\n    }\n    private toString(){\n        return `Route(${this.pattern} -> ${this.location})`\n    }\n}\n\n@Server.handler('files')\nexport class FileHandler extends Handler {\n    config:any;\n    routes:any;\n    constructor(){\n        super();\n        this.config = FileHandler.config;\n        this.routes = [];\n        if(typeof this.config.path=='string'){\n            this.config.path=[this.config.path];\n        }\n        this.config.path.forEach(p=>{\n            this.routes.push(new FileRoute(p));\n        });\n    }\n    private resource(path){\n        try {\n            var stat = Node.Fs.statSync(path);\n            if (stat.isDirectory()) {\n                return this.resource(Node.Path.resolve(path, 'index.html'));\n            } else\n            if (stat.isFile()) {\n                return {exist:true,path:path};\n            } else {\n                return {exist:false,path:path};\n            }\n        }catch(e){\n            return {exist:false,path:path};\n        }\n    }\n    private accept(req,res){\n\n    }\n    private handle(req,res){\n        var path = req.url.split('?')[0];\n        for(var file,i=0;i<this.routes.length;i++){\n            file = this.routes[i].match(path);\n            if(file && (file = this.resource(file)).exist){\n                break;\n            }\n        }\n        if(file && file.exist){\n            let status = 200;\n            let cache = this.config.cache;\n\n            let headers = {\n                'Content-Type'  : Mime.getType(file.path)\n            };\n            if(cache){\n                headers['Cache-Control']    = 'public, max-age=86400';\n                headers['Expires']          = new Date(new Date().getTime()+86400000).toUTCString();\n            }else {\n                headers['Cache-Control']    = 'no-cache';\n            }\n\n            res.stream = Node.Fs.createReadStream(file.path);\n            var ae = req.headers['accept-encoding'];\n            if(ae && ae.indexOf('gzip')>=0){\n                headers['Content-Encoding']='gzip';\n                res.stream = res.stream.pipe(Node.Zlib.createGzip());\n            }\n            res.writeHead(status,headers);\n\n        }else{\n            res.writeHead(404,{\n                'Content-Type' : Mime.getType(file?file.path:req.url)\n            });\n            res.end('File Not Found');\n        }\n    }\n}"]}