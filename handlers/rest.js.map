{
  "version": 3,
  "file": "rest.js",
  "sourceRoot": "/Users/Sergey/Work/BB/wcb-project/http/src",
  "sources": [
    "rest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import Node from '../node';\nimport {Server} from '../server';\nimport {Mime} from '../mime';\nimport {Handler} from './handler';\nimport {Result} from '../rest';\n\nexport class RestRoute {\n    static methods = ['GET','POST','PUT','PATCH','DELETE','HEAD'];\n\n    public resource:any;\n    public action:any;\n    private method:any;\n    private path:any;\n    private params:any;\n    private regexp:any;\n\n    constructor(resource,action,path){\n        this.resource = resource;\n        this.action = action;\n        this.method = action.toUpperCase();\n        this.path   = path;\n        this.params = [];\n        this.regexp = [];\n        path.split('/').forEach(part=>{\n            if(part[0]==':'){\n                var [m,p,r] = part.match(/:([a-zA-Z0-9_\\\\-]+)(.*)/);\n                this.params.push(p);\n                this.regexp.push('([a-zA-Z0-9_\\\\-]+)'+r);\n            }else\n            if(part[0]=='*'){\n                this.params.push(part.substring(1));\n                this.regexp.push('(.*)');\n            }else{\n                this.regexp.push(part);\n            }\n        });\n        this.regexp = new RegExp('^'+this.method+'\\\\s+'+this.regexp.join('\\\\/')+'$');\n    }\n    match(path){\n        return path.match(this.regexp);\n    }\n    toJSON(){\n        return {\n            method    : this.method,\n            path      : this.path,\n            resource  : this.resource.name+'.'+this.action,\n            params    : this.params,\n            regexp    : this.regexp.toString()\n        }\n    }\n    toString(){\n        return 'Route('+this.regexp.toString()+')';\n    }\n}\n\n@Server.handler('rest')\nexport class RestHandler extends Handler {\n    static get routes(){\n        return Object.defineProperty(this,'routes',{\n            enumerable:true,\n            value:Object.create(null)\n        }).routes;\n    }\n    static register(path,resource){\n        Object.getOwnPropertyNames(resource.prototype).forEach(method=>{\n            if(RestRoute.methods.indexOf(method.toUpperCase())>=0){\n                var route = new RestRoute(resource,method,path);\n                var routeId = route.toString();\n                if(!this.routes[routeId]){\n                    this.routes[routeId] = route;\n                }else{\n                    route = this.routes[routeId];\n                    throw new Error(`Cant route '${method.toUpperCase()} ${method.toUpperCase()}' to ${path}.${resource.name} it's already bounded to ${method}.${route.resource.name}`);\n                }\n            }\n        });\n    }\n\n    private config:any;\n\n    constructor(){\n        super();\n        this.config = RestHandler.config;\n    }\n    accept(req,res){\n\n    }\n    handle(req,res){\n        var url = Node.Url.parse(req.url,true);\n        var root = this.config.path;\n        var method = req.method.toUpperCase();\n        var headers = req.headers;\n        var query = url.query;\n        if(url.pathname==root){\n            res.writeHead(200,{\n                'Content-Type': 'application/json'\n            });\n            res.end(JSON.stringify({\n                routes:RestHandler.routes,\n                config:RestHandler.config\n            }));\n        } else\n        if(url.pathname.indexOf(root)==0){\n            var route,matched,path = method+' '+url.pathname.replace(root,'');\n\n            for(var r in RestHandler.routes){\n                route = RestHandler.routes[r];\n                if(matched = route.match(path)){\n                    break;\n                }\n            }\n            if(matched){\n                matched.shift();\n                var match = route.toJSON();\n                match.params = {};\n                match.query = query;\n                match.headers = headers;\n                route.params.forEach((p,i)=>{\n                    match.params[p] = matched[i];\n                });\n                var resource = new route.resource();\n                //resource.path = match.params;\n                //resource.method = match.params;\n                //resource.params = match.params;\n\n                var promise = Promise.resolve(\n                    (req.body&&req.body.length)\n                        ?JSON.parse(req.body.toString())\n                        :null\n                );\n                promise = promise.then(body=>{\n                    resource.headers = match.headers;\n                    resource.query = match.query;\n                    resource.params = match.params;\n                    if(body){\n                        matched.push(body);\n                    }\n                    return route.resource.prototype[route.action].apply(resource,matched);\n                });\n\n                promise = promise.then(result=>{\n                    if(result == null || typeof result == 'undefined'){\n                        return Result.create({\n                            error   : 'Resource Not Found',\n                            code    : 404\n                        },404);\n                    }\n                    if(result instanceof Result){\n                        return result;\n                    }else{\n                        return Result.create(JSON.stringify(result,null,'  '),200,{\n                            'Content-Type': 'application/json'\n                        });\n                    }\n                });\n                promise = promise.catch(result=>{\n                    if(result == null || typeof result == 'undefined'){\n                        return Result.create({\n                            error   : 'Resource Not Found',\n                            code    : 404\n                        },404);\n                    }\n                    if(result instanceof Result){\n                        return result;\n                    }else\n                    if(result instanceof Error){\n                        return Result.create({\n                            error   : result.message,\n                            code    : result.code||500,\n                            details : result.details,\n                            stack   : result.stack.split(\"\\n\")\n                        },500);\n                    }else{\n                        return Result.create({\n                            error   : 'Unknown Server Error',\n                            code    : 500,\n                            data    : result\n                        },500);\n                    }\n                });\n                promise = promise.then(result=>{\n                    res.writeHead(result.status,result.headers);\n                    if(result.value){\n                        if(typeof result.value!=\"string\"){\n                            res.end(JSON.stringify(result.value));\n                        }else{\n                            res.end(result.value);\n                        }\n                    }else{\n                        res.end();\n                    }\n\n                });\n\n                return promise;\n            }else{\n               // console.info(path,res);\n                res.writeHead(404,{\n                    'Content-Type': 'application/json'\n                });\n                res.end(JSON.stringify({\n                    error   : 'Invalid Resource',\n                    code    : 404\n                }));\n            }\n\n        }\n    }\n}\n\n"
  ]
}