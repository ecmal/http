{"version":3,"file":"http_parser.js","sourceRoot":"","sources":["http_parser.ts"],"names":[],"mappings":"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","sourcesContent":["const NodeHTTPParser = system.node.process.binding('http_parser').HTTPParser;\nconst version = NodeHTTPParser.RESPONSE ? 6 : 4;\n\nexport class HttpParser {\n\n    static METHODS = {\n        0: 'DELETE',\n        1: 'GET',\n        2: 'HEAD',\n        3: 'POST',\n        4: 'PUT',\n        5: 'CONNECT',\n        6: 'OPTIONS',\n        7: 'TRACE',\n        8: 'COPY',\n        9: 'LOCK',\n        10: 'MKCOL',\n        11: 'MOVE',\n        12: 'PROPFIND',\n        13: 'PROPPATCH',\n        14: 'SEARCH',\n        15: 'UNLOCK',\n        16: 'REPORT',\n        17: 'MKACTIVITY',\n        18: 'CHECKOUT',\n        19: 'MERGE',\n        24: 'PATCH'\n    };\n\n    private _parser:any;\n    private _type:any;\n    private _complete:any;\n    public headers:any;\n    public method:string;\n    public url:string;\n    public body:any;\n    public statusCode:number;\n\n    public constructor(type) {\n        if (type === 'request')\n            this._parser = new NodeHTTPParser(NodeHTTPParser.REQUEST || 'request');\n        else\n            this._parser = new NodeHTTPParser(NodeHTTPParser.RESPONSE || 'response');\n\n        this._type = type;\n        this._complete = false;\n        this.headers = {};\n\n        var current = null;\n\n        this._parser.onHeaderField = (b, start, length) =>{\n            current = b.toString('utf8', start, start + length).toLowerCase();\n        };\n        this._parser.onHeaderValue = (b, start, length) =>{\n            var value = b.toString('utf8', start, start + length);\n\n            if (this.headers.hasOwnProperty(current))\n                this.headers[current] += ', ' + value;\n            else\n                this.headers[current] = value;\n        };\n        this._parser.onHeadersComplete = this._parser[NodeHTTPParser.kOnHeadersComplete] = (majorVersion, minorVersion, headers, method, pathname, statusCode) => {\n            var info = majorVersion;\n            if (typeof info === 'object') {\n                method = info.method;\n                pathname = info.url;\n                statusCode = info.statusCode;\n                headers = info.headers;\n            }\n\n            this.method = (typeof method === 'number') ? HttpParser.METHODS[method] : method;\n            this.statusCode = statusCode;\n            this.url = pathname;\n\n            if (!headers) return;\n\n            for (var i = 0, n = headers.length, key, value; i < n; i += 2) {\n                key = headers[i].toLowerCase();\n                value = headers[i + 1];\n                if (this.headers.hasOwnProperty(key))\n                    this.headers[key] += ', ' + value;\n                else\n                    this.headers[key] = value;\n            }\n\n            this._complete = true;\n        };\n    }\n    public isComplete() {\n        return this._complete;\n    }\n    public parse(chunk) {\n        var offset = (version < 6) ? 1 : 0,\n            consumed = this._parser.execute(chunk, 0, chunk.length) + offset;\n        if (this._complete) {\n            this.body = (consumed < chunk.length)\n                ? chunk.slice(consumed)\n                : new Buffer(0);\n        }\n    }\n}\n\n"]}