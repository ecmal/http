{"version":3,"file":"functor.js","sourceRoot":"","sources":["functor.ts"],"names":[],"mappings":";;IAEA;QAgBS,sBAAI,GAAX,UAAY,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO;YAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC;YAE1B,IAAI,MAAM,GAAG,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAC,EAC5F,MAAM,GAAG,KAAK,EACd,IAAI,GAAK,IAAI,CAAC;YAElB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEzB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC5B,CAAC;YAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE,GAAG;gBACpD,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAA,CAAC;oBAC9B,MAAM,CAAC;gBACT,CAAC;gBACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,MAAM,CAAC,KAAK,GAAK,GAAG,CAAC;oBACrB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;gBACxB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;gBACvB,CAAC;gBACD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;gBACnB,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC;QACS,uBAAK,GAAf;YACE,IAAI,CAAC,OAAO,GAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC;QACS,6BAAW,GAArB;YACE,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;YAEhC,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;gBAC7C,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC;gBAClB,MAAM,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;gBACvB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YACrE,CAAC;QACH,CAAC;;;YAzDM,kBAAU,GAAG,CAAC,CAAC;;QA0DxB,cAAC;QAlDC,iBAAY,OAAO,EAAE,MAAM;YACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,OAAO,GAAI,MAAM,CAAC;YACvB,IAAI,CAAC,MAAM,GAAK,IAAI,wBAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACnD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,OAAO,GAAI,CAAC,CAAC;QACpB,CAAC;IA4CH,CAAC,AA3DD,IA2DC;;IA3DD,iCA2DC,CAAA;;;;;;;YA3DD,sBAAA,OA2DC","sourcesContent":["import {RingBuffer} from \"./ring_buffer\";\n\nexport class Functor {\n  static QUEUE_SIZE = 8;\n\n  public pending;\n  protected _session;\n  protected _method;\n  protected _queue;\n  protected _stopped;\n\n  constructor(session, method) {\n    this._session = session;\n    this._method  = method;\n    this._queue   = new RingBuffer(Functor.QUEUE_SIZE);\n    this._stopped = false;\n    this.pending  = 0;\n  }\n  public call(error, message, callback, context) {\n    if (this._stopped) return;\n\n    var record = {error: error, message: message, callback: callback, context: context, done: false},\n        called = false,\n        self   = this;\n\n    this._queue.push(record);\n\n    if (record.error) {\n      record.done = true;\n      this._stop();\n      return this._flushQueue();\n    }\n\n    this._session[this._method](message, function(err, msg) {\n      if (called === (called = true)){\n        return;\n      }\n      if (err) {\n        self._stop();\n        record.error   = err;\n        record.message = null;\n      } else {\n        record.message = msg;\n      }\n      record.done = true;\n      self._flushQueue();\n    });\n  }\n  protected _stop() {\n    this.pending  = this._queue.length;\n    this._stopped = true;\n  }\n  protected _flushQueue() {\n    var queue = this._queue, record;\n\n    while (queue.length > 0 && queue.peek().done) {\n      this.pending -= 1;\n      record = queue.shift();\n      record.callback.call(record.context, record.error, record.message);\n    }\n  }\n}\n\n\n\n\n"]}