{"version":3,"file":"cell.js","sourceRoot":"","sources":["cell.ts"],"names":[],"mappings":";;IAGA;QAeS,sBAAO,GAAd,UAAgB,SAAS;YACvB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC;QACzC,CAAC;QACM,uBAAQ,GAAf,UAAgB,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO;YAC/C,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC;QACM,uBAAQ,GAAf,UAAgB,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO;YAC/C,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC;QACM,oBAAK,GAAZ;YACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,eAAM,EAAE,CAAC;YAC5C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;QACS,oBAAK,GAAf,UAAiB,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO;YAC3D,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,UAAS,GAAG,EAAE,GAAG;gBAC9D,EAAE,CAAC,CAAC,GAAG,CAAC;oBAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;gBAC3D,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;gBACjC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC;QACS,uBAAQ,GAAlB;YACE,IAAI,GAAG,GAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAC9B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YAEnC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC;gBAAC,MAAM,CAAC;YAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC;QACH,WAAC;QAtCC,cAAmB,KAAK;YACtB,IAAI,CAAC,IAAI,GAAO,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,GAAG;gBACf,QAAQ,EAAE,IAAI,iBAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,wBAAwB,CAAC;gBAC9D,QAAQ,EAAE,IAAI,iBAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,wBAAwB,CAAC;aAC/D,CAAC;QACJ,CAAC;IA+BH,CAAC,AA7CD,IA6CC;;IA7CD,2BA6CC,CAAA;;;;;;;;;;YA7CD,mBAAA,IA6CC","sourcesContent":["import {Functor} from \"./functor\";\nimport {Pledge} from \"./pledge\";\n\nexport class Cell {\n\n  protected _ext;\n  protected _session;\n  protected _functors;\n  protected _closed;\n\n  public constructor(tuple) {\n    this._ext     = tuple[0];\n    this._session = tuple[1];\n    this._functors = {\n      incoming: new Functor(this._session, 'processIncomingMessage'),\n      outgoing: new Functor(this._session, 'processOutgoingMessage')\n    };\n  }\n  public pending (direction) {\n    this._functors[direction].pending += 1;\n  }\n  public incoming(error, message, callback, context) {\n    this._exec('incoming', error, message, callback, context);\n  }\n  public outgoing(error, message, callback, context) {\n    this._exec('outgoing', error, message, callback, context);\n  }\n  public close() {\n    this._closed = this._closed || new Pledge();\n    this._doClose();\n    return this._closed;\n  }\n  protected _exec (direction, error, message, callback, context) {\n    this._functors[direction].call(error, message, function(err, msg) {\n      if (err) err.message = this._ext.name + ': ' + err.message;\n      callback.call(context, err, msg);\n      this._doClose();\n    }, this);\n  }\n  protected _doClose () {\n    var fin  = this._functors.incoming,\n        fout = this._functors.outgoing;\n\n    if (!this._closed || fin.pending + fout.pending !== 0) return;\n    if (this._session) this._session.close();\n    this._session = null;\n    this._closed.done();\n  }\n}\n\n"]}