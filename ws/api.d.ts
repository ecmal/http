import { Stream } from "node/stream";
import { Base } from "./driver/base";
import { EventTarget } from "./events";
export declare class API extends Stream implements EventTarget {
    static CONNECTING: number;
    static OPEN: number;
    static CLOSING: number;
    static CLOSED: number;
    readable: boolean;
    writable: boolean;
    readyState: any;
    bufferedAmount: any;
    protocol: any;
    url: any;
    version: any;
    protected _driver: Base;
    protected _ping: any;
    protected _pingId: any;
    protected _pingTimer: any;
    protected _proxy: any;
    protected _stream: any;
    protected _closeParams: any;
    constructor(options?: any);
    write(data: any): boolean;
    end(data: any): void;
    pause(): void;
    resume(): void;
    send(data: any): boolean;
    ping(message: any, callback?: any): boolean;
    close(code?: any, reason?: any): void;
    onopen: (event) => void;
    onmessage: (event) => void;
    onerror: (event) => void;
    onclose: (event) => void;
    addEventListener(eventType: any, listener: any, useCapture: any): void;
    removeEventListener(eventType: any, listener: any, useCapture: any): void;
    dispatchEvent(event: any): void;
    protected _configureApi(options: any): void;
    protected _configureStream(): void;
    protected _open(): void;
    protected _receiveMessage(data: any): boolean;
    protected _emitError(message: any): void;
    protected _beginClose(reason: any, code: any): void;
    protected _finalizeClose(): void;
}
