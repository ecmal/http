{"version":3,"file":"client.js","sourceRoot":"","sources":["client.ts"],"names":[],"mappings":"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","sourcesContent":["import * as net from \"node/net\";\nimport * as tls from \"node/tls\";\nimport * as url from \"node/url\";\n\nimport {Driver} from \"./driver\";\nimport {API} from \"./api\";\n\nconst DEFAULT_PORTS    = {\n    'http:'   : 80,\n    'https:'  : 443,\n    'ws:'     : 80,\n    'wss:'    : 443\n};\nconst SECURE_PROTOCOLS = [\n    'https:', 'wss:'\n];\n\nexport class Client extends API {\n    public headers:any;\n    public statusCode:number;\n\n    constructor(_url, protocols, options) {\n        super();\n        this.url     = _url;\n        this._driver = Driver.client(this.url, {\n            maxLength: options.maxLength,\n            protocols: protocols\n        });\n        ['open', 'error'].forEach((event)=>{\n            this._driver.on(event,()=>{\n                this.headers    = this._driver.headers;\n                this.statusCode = this._driver.statusCode;\n            });\n        });\n        var proxy      = options.proxy || {},\n            endpoint   = url.parse(proxy.origin || this.url),\n            port       = endpoint.port || DEFAULT_PORTS[endpoint.protocol],\n            secure     = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,\n            netOptions = options.net || {},\n            originTLS  = options.tls || {},\n            socketTLS  = proxy.origin ? (proxy.tls || {}) : originTLS;\n\n        netOptions.host = socketTLS.host = endpoint.hostname;\n        netOptions.port = socketTLS.port = port;\n\n        originTLS.ca = originTLS.ca || options.ca;\n        socketTLS.servername = socketTLS.servername || endpoint.hostname;\n\n        this._stream = secure\n            ? tls.connect(socketTLS, ()=>{ this._onConnect() })\n            : net.connect(netOptions, ()=>{ this._onConnect() });\n\n        if (proxy.origin) {\n            this._configureProxy(proxy, originTLS);\n        }\n        this._configureApi(options)\n    }\n    protected _onConnect() {\n        var worker = this._proxy || this._driver;\n        worker.start();\n    }\n    protected _configureProxy(proxy, originTLS) {\n        var uri    = url.parse(this.url),\n            secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,\n            self   = this,\n            name;\n\n        this._proxy = this._driver.proxy(proxy.origin);\n\n        if (proxy.headers) {\n            for (name in proxy.headers) this._proxy.setHeader(name, proxy.headers[name]);\n        }\n\n        this._proxy.pipe(this._stream, {end: false});\n        this._stream.pipe(this._proxy);\n\n        this._proxy.on('connect', function() {\n            if (secure) {\n                var options = {socket: self._stream, servername: uri.hostname};\n                for (name in originTLS) options[name] = originTLS[name];\n                self._stream = tls.connect(options);\n                self._configureStream();\n            }\n            self._driver.io.pipe(self._stream);\n            self._stream.pipe(self._driver.io);\n            self._driver.start();\n        });\n\n        this._proxy.on('error', function(error) {\n            self._driver.emit('error', error);\n        });\n    }\n}\n\n"]}